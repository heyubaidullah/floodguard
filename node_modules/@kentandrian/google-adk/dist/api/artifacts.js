"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Artifacts = void 0;
class Artifacts {
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all artifact names for a given session.
     * @param sessionId The ID of the session to list artifacts for.
     * @returns A list of artifact names for the specified session.
     */
    listNames(sessionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/users/${this.client.userId}/sessions/${sessionId}/artifacts`);
        });
    }
    /**
     * Loads an artifact by its name for a given session.
     * @param sessionId The ID of the session to load the artifact from.
     * @param artifactName The name of the artifact to load.
     * @returns The loaded artifact as an AdkAgentPart object.
     */
    load(sessionId, artifactName) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/users/${this.client.userId}/sessions/${sessionId}/artifacts/${artifactName}`);
        });
    }
    /**
     * Deletes an artifact by its name for a given session.
     * @param sessionId The ID of the session to delete the artifact from.
     * @param artifactName The name of the artifact to delete.
     */
    delete(sessionId, artifactName) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.request(`/apps/${this.client.appName}/users/${this.client.userId}/sessions/${sessionId}/artifacts/${artifactName}`, {
                method: "DELETE",
            });
        });
    }
    /**
     * Lists all versions of an artifact for a given session.
     * @param sessionId The ID of the session to list artifact versions for.
     * @param artifactName The name of the artifact to list versions for.
     * @returns A list of version IDs for the specified artifact.
     */
    listVersions(sessionId, artifactName) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/users/${this.client.userId}/sessions/${sessionId}/artifacts/${artifactName}/versions`);
        });
    }
    /**
     * Loads a specific version of an artifact for a given session.
     * @param sessionId The ID of the session to load the artifact version from.
     * @param artifactName The name of the artifact to load.
     * @param versionId The ID of the version to load.
     * @returns The loaded artifact version as an AdkAgentPart object.
     */
    loadVersion(sessionId, artifactName, versionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/users/${this.client.userId}/sessions/${sessionId}/artifacts/${artifactName}/versions/${versionId}`);
        });
    }
}
exports.Artifacts = Artifacts;
//# sourceMappingURL=artifacts.js.map