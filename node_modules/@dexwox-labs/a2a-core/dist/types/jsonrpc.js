"use strict";
/**
 * @module JsonRpc
 * @description JSON-RPC 2.0 types and schemas for the A2A protocol
 *
 * This module defines the types and schemas for JSON-RPC 2.0 communication in the
 * A2A protocol. It includes schemas for validating JSON-RPC messages, requests,
 * and responses, as well as TypeScript types derived from these schemas.
 *
 * The A2A protocol uses JSON-RPC 2.0 as its primary communication protocol for
 * HTTP-based interactions between clients and servers.
 *
 * @see https://www.jsonrpc.org/specification
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonRpcStreamResponseSchema = exports.JsonRpcResponseSchema = exports.JsonRpcRequestSchema = exports.JsonRpcMessageSchema = void 0;
const zod_1 = require("zod");
/**
 * Base JSON-RPC 2.0 message schema
 *
 * This schema defines the base structure for all JSON-RPC 2.0 messages,
 * including the required jsonrpc field and optional id field. All JSON-RPC
 * requests and responses extend this base schema.
 *
 * @see https://www.jsonrpc.org/specification
 *
 * @example
 * ```typescript
 * // Validate a JSON-RPC message
 * const message = {
 *   jsonrpc: '2.0',
 *   id: 'request-123'
 * };
 *
 * const result = JsonRpcMessageSchema.safeParse(message);
 * if (result.success) {
 *   console.log('Valid JSON-RPC message');
 * } else {
 *   console.error('Invalid JSON-RPC message:', result.error);
 * }
 * ```
 */
exports.JsonRpcMessageSchema = zod_1.z.object({
    jsonrpc: zod_1.z.literal('2.0'),
    id: zod_1.z.union([zod_1.z.string(), zod_1.z.number()]).optional(),
});
/**
 * JSON-RPC request schema
 *
 * This schema defines the structure for JSON-RPC 2.0 request messages,
 * extending the base message schema with required method and optional
 * params fields. The method field specifies the operation to be performed,
 * and the params field contains the arguments for that operation.
 *
 * @property method - The method to be invoked
 * @property params - Optional parameters for the method
 *
 * @example
 * ```typescript
 * // Create and validate a JSON-RPC request
 * const request = {
 *   jsonrpc: '2.0',
 *   id: 'request-123',
 *   method: 'sendMessage',
 *   params: {
 *     agentId: 'assistant-agent',
 *     parts: [{ type: 'text', content: 'Hello, world!' }]
 *   }
 * };
 *
 * const result = JsonRpcRequestSchema.safeParse(request);
 * if (result.success) {
 *   console.log('Valid JSON-RPC request');
 * } else {
 *   console.error('Invalid JSON-RPC request:', result.error);
 * }
 * ```
 */
exports.JsonRpcRequestSchema = exports.JsonRpcMessageSchema.extend({
    method: zod_1.z.string(),
    params: zod_1.z.record(zod_1.z.any()).optional(),
});
/**
 * JSON-RPC response schema
 *
 * This schema defines the structure for JSON-RPC 2.0 response messages,
 * extending the base message schema with optional result and error fields.
 * A successful response includes a result field, while an error response
 * includes an error field with code, message, and optional data properties.
 *
 * @property result - Successful response data (mutually exclusive with error)
 * @property error - Error response object (mutually exclusive with result)
 *
 * @example
 * ```typescript
 * // Create and validate a successful JSON-RPC response
 * const successResponse = {
 *   jsonrpc: '2.0',
 *   id: 'request-123',
 *   result: { taskId: 'task-456' }
 * };
 *
 * // Create and validate an error JSON-RPC response
 * const errorResponse = {
 *   jsonrpc: '2.0',
 *   id: 'request-123',
 *   error: {
 *     code: -32602,
 *     message: 'Invalid params',
 *     data: { details: 'Missing required field: agentId' }
 *   }
 * };
 * ```
 */
exports.JsonRpcResponseSchema = exports.JsonRpcMessageSchema.extend({
    result: zod_1.z.any().optional(),
    error: zod_1.z.object({
        code: zod_1.z.number(),
        message: zod_1.z.string(),
        data: zod_1.z.any().optional(),
    }).optional(),
});
/**
 * JSON-RPC streaming response schema
 * @property event - Event type for streaming
 * @property data - Streaming data payload
 * @example
 * {
 *   jsonrpc: '2.0',
 *   event: 'update',
 *   data: { progress: 50 }
 * }
 */
exports.JsonRpcStreamResponseSchema = exports.JsonRpcMessageSchema.extend({
    result: zod_1.z.any().optional(),
    event: zod_1.z.string().optional(),
    data: zod_1.z.any().optional()
});
//# sourceMappingURL=jsonrpc.js.map