"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Evals = void 0;
class Evals {
    constructor(client) {
        this.client = client;
    }
    /**
     * Adds a session to an evaluation set.
     * @param evalSetId The ID of the evaluation set to add the session to.
     * @param sessionId The ID of the session to add.
     * @param evalId The ID of the evaluation to associate with the session.
     * @param userId The ID of the user who owns the session.
     * @returns The ID of the added session in the evaluation set.
     */
    addSessionToEvalSet(evalSetId, sessionId, evalId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/eval_sets/${evalSetId}/add_session`, {
                method: "POST",
                body: JSON.stringify({
                    evalId: evalId,
                    sessionId: sessionId,
                    userId: userId,
                }),
            });
        });
    }
    /**
     * Creates a new evaluation set.
     * @param evalSetId The ID of the evaluation set to create.
     * @returns The ID of the created evaluation set.
     */
    createEvalSet(evalSetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/eval_sets/${evalSetId}`, {
                method: "POST",
            });
        });
    }
    /**
     * Deletes an evaluation from a specific evaluation set.
     * @param evalSetId The ID of the evaluation set to delete from.
     * @param evalCaseId The ID of the evaluation to delete.
     * @returns The ID of the deleted evaluation.
     */
    deleteEval(evalSetId, evalCaseId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/eval_sets/${evalSetId}/evals/${evalCaseId}`, {
                method: "DELETE",
            });
        });
    }
    /**
     * Gets an evaluation from a specific evaluation set.
     * @param evalSetId The ID of the evaluation set to get the evaluation from.
     * @param evalCaseId The ID of the evaluation to get.
     * @returns The requested evaluation.
     */
    getEval(evalSetId, evalCaseId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/eval_sets/${evalSetId}/evals/${evalCaseId}`);
        });
    }
    /**
     * Gets the result of a specific evaluation.
     * @param evalResultId The ID of the evaluation result to get.
     * @returns The requested evaluation result.
     */
    getEvalResult(evalResultId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/eval_results/${evalResultId}`);
        });
    }
    /**
     * Lists all evaluation results.
     * @returns A list of all evaluation results.
     */
    listEvalResults() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/eval_results`);
        });
    }
    /**
     * Lists all evaluation sets.
     * @returns A list of all evaluation sets available to the user.
     */
    listEvalSets() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/eval_sets`);
        });
    }
    /**
     * Lists all evaluations in a specific evaluation set.
     * @param evalSetId The ID of the evaluation set to list evaluations for.
     * @returns A list of all evaluations in the specified evaluation set.
     */
    listEvalsInEvalSet(evalSetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/eval_sets/${evalSetId}/evals`);
        });
    }
    /**
     * Runs an evaluation for a specific evaluation set.
     * @param evalSetId The ID of the evaluation set to run.
     * @returns The response from the API.
     */
    runEval(evalSetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/eval_sets/${evalSetId}/run_eval`, {
                method: "POST",
            });
        });
    }
    /**
     * Updates an evaluation in a specific evaluation set.
     * @param evalSetId The ID of the evaluation set to update.
     * @param evalCaseId The ID of the evaluation to update.
     * @param data The updated evaluation data.
     * @returns The updated evaluation.
     */
    updateEval(evalSetId, evalCaseId, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/eval_sets/${evalSetId}/evals/${evalCaseId}`, {
                method: "PUT",
                body: JSON.stringify(data),
            });
        });
    }
}
exports.Evals = Evals;
//# sourceMappingURL=evals.js.map