"use strict";
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskResubscriptionHandler = void 0;
const request_handler_1 = require("../request-handler");
class TaskResubscriptionHandler {
    constructor(taskManager) {
        this.taskManager = taskManager;
        this.requestHandler = new request_handler_1.DefaultRequestHandler();
    }
    /**
     * Handle task resubscription request
     * @param context Request context
     * @param queue Event queue for streaming updates
     */
    handleResubscription(context, queue) {
        return __asyncGenerator(this, arguments, function* handleResubscription_1() {
            const task = yield __await(this.taskManager.getTask(context.task.id));
            if (!task) {
                throw this.requestHandler.normalizeError({ code: -32004, message: 'Task not found' });
            }
            // First yield existing task parts
            for (const part of task.parts || []) {
                yield yield __await(part);
            }
            // Use the queue's built-in dequeue method
            while (task.status === 'working') {
                const event = yield __await(queue.dequeue());
                if (event) {
                    yield yield __await(event);
                }
            }
        });
    }
}
exports.TaskResubscriptionHandler = TaskResubscriptionHandler;
//# sourceMappingURL=task-resubscription.js.map