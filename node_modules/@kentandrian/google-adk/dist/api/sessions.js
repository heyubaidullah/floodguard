"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sessions = void 0;
class Sessions {
    constructor(client) {
        this.client = client;
    }
    /**
     * Creates a new session.
     * @returns The created session.
     */
    create() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/users/${this.client.userId}/sessions`, {
                method: "POST",
            });
        });
    }
    /**
     * Lists all sessions for the user.
     * @returns A list of user's sessions.
     */
    list() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/users/${this.client.userId}/sessions`);
        });
    }
    /**
     * Creates a new session with a specific ID.
     * @param sessionId The ID of the session to create.
     * @returns The created session.
     */
    createWithId(sessionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/users/${this.client.userId}/sessions/${sessionId}`, {
                method: "POST",
            });
        });
    }
    /**
     * Gets a specific session by its ID.
     * @param sessionId The ID of the session to retrieve.
     * @returns The requested session.
     */
    get(sessionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.requestJson(`/apps/${this.client.appName}/users/${this.client.userId}/sessions/${sessionId}`);
        });
    }
    /**
     * Deletes a specific session by its ID.
     * @param sessionId The ID of the session to delete.
     */
    delete(sessionId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.client.request(`/apps/${this.client.appName}/users/${this.client.userId}/sessions/${sessionId}`, {
                method: "DELETE",
            });
        });
    }
}
exports.Sessions = Sessions;
//# sourceMappingURL=sessions.js.map