"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdkClient = void 0;
const apps_1 = require("./api/apps");
const artifacts_1 = require("./api/artifacts");
const debug_1 = require("./api/debug");
const evals_1 = require("./api/evals");
const events_1 = require("./api/events");
const sessions_1 = require("./api/sessions");
/**
 * The main entry point for interacting with the ADK API.
 * It provides methods to manage applications, sessions, artifacts, evaluations,
 * and events.
 *
 * @example
 * const adkClient = new AdkClient({
 *   appName: "myApp",
 *   baseUrl: "https://api.example.com",
 *   userId: "user123",
 * });
 */
class AdkClient {
    constructor(options) {
        var _a, _b;
        const appName = (_a = options.appName) !== null && _a !== void 0 ? _a : process.env.ADK_APP_NAME;
        const baseUrl = (_b = options.baseUrl) !== null && _b !== void 0 ? _b : process.env.ADK_BASE_URL;
        this.userId = options.userId;
        if (!appName) {
            throw new Error("App name is required. Provide it in the constructor or set the ADK_APP_NAME environment variable.");
        }
        if (!baseUrl) {
            throw new Error("Base URL is required. Provide it in the constructor or set the ADK_BASE_URL environment variable.");
        }
        this.appName = appName;
        this.baseUrl = baseUrl;
        this.apps = new apps_1.Apps({
            appName: this.appName,
            userId: this.userId,
            request: this.request.bind(this),
            requestJson: this.requestJson.bind(this),
        });
        this.artifacts = new artifacts_1.Artifacts({
            appName: this.appName,
            userId: this.userId,
            request: this.request.bind(this),
            requestJson: this.requestJson.bind(this),
        });
        this.debug = new debug_1.Debug({
            appName: this.appName,
            userId: this.userId,
            request: this.request.bind(this),
            requestJson: this.requestJson.bind(this),
        });
        this.evals = new evals_1.Evals({
            appName: this.appName,
            userId: this.userId,
            request: this.request.bind(this),
            requestJson: this.requestJson.bind(this),
        });
        this.events = new events_1.Events({
            appName: this.appName,
            userId: this.userId,
            request: this.request.bind(this),
            requestJson: this.requestJson.bind(this),
        });
        this.sessions = new sessions_1.Sessions({
            appName: this.appName,
            userId: this.userId,
            request: this.request.bind(this),
            requestJson: this.requestJson.bind(this),
        });
    }
    request(endpoint, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${this.baseUrl}${endpoint}`;
            const response = yield fetch(url, Object.assign(Object.assign({}, options), { headers: Object.assign({ accept: "application/json, text/plain, */*", "Content-Type": "application/json" }, options === null || options === void 0 ? void 0 : options.headers) }));
            if (!response.ok) {
                throw new Error(`API call failed: ${response.statusText}`);
            }
            return response;
        });
    }
    requestJson(endpoint, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.request(endpoint, options);
            return response.json();
        });
    }
    transformMessagesToAdkNewMessage(messages) {
        const lastMessage = messages[messages.length - 1];
        const parts = lastMessage.parts.map((part) => {
            var _a;
            switch (part.type) {
                case "text":
                    return { text: part.text };
                case "file": {
                    const [_, base64Data] = part.url.split(",");
                    return {
                        inlineData: {
                            data: base64Data,
                            displayName: (_a = part.filename) !== null && _a !== void 0 ? _a : "file",
                            mimeType: part.mediaType,
                        },
                    };
                }
                default:
                    return {};
            }
        });
        return {
            parts,
            role: lastMessage.role,
        };
    }
    runSse(sessionId, messages) {
        return __awaiter(this, void 0, void 0, function* () {
            const newMessage = this.transformMessagesToAdkNewMessage(messages);
            const body = {
                appName: this.appName,
                userId: this.userId,
                sessionId: sessionId,
                newMessage,
                streaming: true,
            };
            return this.request("/run_sse", {
                body: JSON.stringify(body),
                headers: { accept: "text/event-stream" },
                method: "POST",
            });
        });
    }
    run(sessionId, messages) {
        return __awaiter(this, void 0, void 0, function* () {
            const newMessage = this.transformMessagesToAdkNewMessage(messages);
            const body = {
                appName: this.appName,
                userId: this.userId,
                sessionId: sessionId,
                newMessage,
                streaming: false,
            };
            return this.request("/run", {
                body: JSON.stringify(body),
                method: "POST",
            });
        });
    }
}
exports.AdkClient = AdkClient;
__exportStar(require("./types"), exports);
//# sourceMappingURL=index.js.map