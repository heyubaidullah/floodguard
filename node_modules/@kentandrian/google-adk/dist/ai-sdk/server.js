"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAdkAiSdkStream = createAdkAiSdkStream;
const ai_1 = require("ai");
const utils_1 = require("../utils");
/**
 * Creates a stream response for UI messages from an SSE stream.
 * This function reads the stream, decodes the text, and writes the messages to the writer.
 * It handles the parsing of JSON data from the SSE format and writes deltas for text messages
 * with start and end markers.
 *
 * @param response - The response from the server containing the SSE stream.
 * @param options - Optional parameters to customize the stream creation.
 * @throws Will throw an error if the response body is not available.
 * @returns A stream response that can be used to send messages to the UI.
 * @example
 * const client = new AdkClient(userId);
 * const response = await client.runSse(sessionId, messages);
 * return createAdkAiSdkStream(response);
 */
function createAdkAiSdkStream(response, options = {}) {
    if (!response.body) {
        throw new Error("No response body");
    }
    const sseStream = response.body;
    return (0, ai_1.createUIMessageStreamResponse)(Object.assign({ stream: (0, ai_1.createUIMessageStream)(Object.assign({ execute(_a) {
                return __awaiter(this, arguments, void 0, function* ({ writer }) {
                    var _b, _c, _d;
                    const reader = sseStream.getReader();
                    const decoder = new TextDecoder();
                    let buffer = "";
                    const messageId = (0, utils_1.generateUUID)();
                    writer.write({
                        type: "text-start",
                        id: messageId,
                    });
                    while (true) {
                        const { done, value } = yield reader.read();
                        if (done) {
                            break;
                        }
                        buffer += decoder.decode(value, { stream: true });
                        const lines = buffer.split("\n");
                        buffer = (_b = lines.pop()) !== null && _b !== void 0 ? _b : "";
                        for (const line of lines) {
                            if (line.startsWith("data: ")) {
                                try {
                                    const json = JSON.parse(line.substring(6));
                                    if ((json === null || json === void 0 ? void 0 : json.partial) && ((_d = (_c = json === null || json === void 0 ? void 0 : json.content) === null || _c === void 0 ? void 0 : _c.parts) === null || _d === void 0 ? void 0 : _d[0].text)) {
                                        writer.write({
                                            type: "text-delta",
                                            id: messageId,
                                            delta: json.content.parts[0].text,
                                        });
                                    }
                                }
                                catch (error) {
                                    console.error(error);
                                }
                            }
                        }
                    }
                    writer.write({
                        type: "text-end",
                        id: messageId,
                    });
                });
            }, generateId: utils_1.generateUUID }, options.createUIMessageStream)) }, options.createUIMessageStreamResponse));
}
//# sourceMappingURL=server.js.map